// Generated by gencpp from file RoboCompLaserROS/LaserConfData.msg
// DO NOT EDIT!


#ifndef ROBOCOMPLASERROS_MESSAGE_LASERCONFDATA_H
#define ROBOCOMPLASERROS_MESSAGE_LASERCONFDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RoboCompLaserROS
{
template <class ContainerAllocator>
struct LaserConfData_
{
  typedef LaserConfData_<ContainerAllocator> Type;

  LaserConfData_()
    : driver()
    , device()
    , staticConf(0)
    , maxMeasures(0)
    , maxDegrees(0)
    , maxRange(0)
    , minRange(0)
    , iniRange(0)
    , endRange(0)
    , cluster(0)
    , sampleRate(0)
    , angleRes(0.0)
    , angleIni(0.0)  {
    }
  LaserConfData_(const ContainerAllocator& _alloc)
    : driver(_alloc)
    , device(_alloc)
    , staticConf(0)
    , maxMeasures(0)
    , maxDegrees(0)
    , maxRange(0)
    , minRange(0)
    , iniRange(0)
    , endRange(0)
    , cluster(0)
    , sampleRate(0)
    , angleRes(0.0)
    , angleIni(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _driver_type;
  _driver_type driver;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _device_type;
  _device_type device;

   typedef int32_t _staticConf_type;
  _staticConf_type staticConf;

   typedef int32_t _maxMeasures_type;
  _maxMeasures_type maxMeasures;

   typedef int32_t _maxDegrees_type;
  _maxDegrees_type maxDegrees;

   typedef int32_t _maxRange_type;
  _maxRange_type maxRange;

   typedef int32_t _minRange_type;
  _minRange_type minRange;

   typedef int32_t _iniRange_type;
  _iniRange_type iniRange;

   typedef int32_t _endRange_type;
  _endRange_type endRange;

   typedef int32_t _cluster_type;
  _cluster_type cluster;

   typedef int32_t _sampleRate_type;
  _sampleRate_type sampleRate;

   typedef float _angleRes_type;
  _angleRes_type angleRes;

   typedef float _angleIni_type;
  _angleIni_type angleIni;





  typedef boost::shared_ptr< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> const> ConstPtr;

}; // struct LaserConfData_

typedef ::RoboCompLaserROS::LaserConfData_<std::allocator<void> > LaserConfData;

typedef boost::shared_ptr< ::RoboCompLaserROS::LaserConfData > LaserConfDataPtr;
typedef boost::shared_ptr< ::RoboCompLaserROS::LaserConfData const> LaserConfDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RoboCompLaserROS::LaserConfData_<ContainerAllocator1> & lhs, const ::RoboCompLaserROS::LaserConfData_<ContainerAllocator2> & rhs)
{
  return lhs.driver == rhs.driver &&
    lhs.device == rhs.device &&
    lhs.staticConf == rhs.staticConf &&
    lhs.maxMeasures == rhs.maxMeasures &&
    lhs.maxDegrees == rhs.maxDegrees &&
    lhs.maxRange == rhs.maxRange &&
    lhs.minRange == rhs.minRange &&
    lhs.iniRange == rhs.iniRange &&
    lhs.endRange == rhs.endRange &&
    lhs.cluster == rhs.cluster &&
    lhs.sampleRate == rhs.sampleRate &&
    lhs.angleRes == rhs.angleRes &&
    lhs.angleIni == rhs.angleIni;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RoboCompLaserROS::LaserConfData_<ContainerAllocator1> & lhs, const ::RoboCompLaserROS::LaserConfData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RoboCompLaserROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4c98d47f963e4a108e0d255980f48d2";
  }

  static const char* value(const ::RoboCompLaserROS::LaserConfData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4c98d47f963e4a1ULL;
  static const uint64_t static_value2 = 0x08e0d255980f48d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RoboCompLaserROS/LaserConfData";
  }

  static const char* value(const ::RoboCompLaserROS::LaserConfData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string driver\n"
"string device\n"
"int32 staticConf\n"
"int32 maxMeasures\n"
"int32 maxDegrees\n"
"int32 maxRange\n"
"int32 minRange\n"
"int32 iniRange\n"
"int32 endRange\n"
"int32 cluster\n"
"int32 sampleRate\n"
"float32 angleRes\n"
"float32 angleIni\n"
;
  }

  static const char* value(const ::RoboCompLaserROS::LaserConfData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.driver);
      stream.next(m.device);
      stream.next(m.staticConf);
      stream.next(m.maxMeasures);
      stream.next(m.maxDegrees);
      stream.next(m.maxRange);
      stream.next(m.minRange);
      stream.next(m.iniRange);
      stream.next(m.endRange);
      stream.next(m.cluster);
      stream.next(m.sampleRate);
      stream.next(m.angleRes);
      stream.next(m.angleIni);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaserConfData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RoboCompLaserROS::LaserConfData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RoboCompLaserROS::LaserConfData_<ContainerAllocator>& v)
  {
    s << indent << "driver: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.driver);
    s << indent << "device: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.device);
    s << indent << "staticConf: ";
    Printer<int32_t>::stream(s, indent + "  ", v.staticConf);
    s << indent << "maxMeasures: ";
    Printer<int32_t>::stream(s, indent + "  ", v.maxMeasures);
    s << indent << "maxDegrees: ";
    Printer<int32_t>::stream(s, indent + "  ", v.maxDegrees);
    s << indent << "maxRange: ";
    Printer<int32_t>::stream(s, indent + "  ", v.maxRange);
    s << indent << "minRange: ";
    Printer<int32_t>::stream(s, indent + "  ", v.minRange);
    s << indent << "iniRange: ";
    Printer<int32_t>::stream(s, indent + "  ", v.iniRange);
    s << indent << "endRange: ";
    Printer<int32_t>::stream(s, indent + "  ", v.endRange);
    s << indent << "cluster: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cluster);
    s << indent << "sampleRate: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sampleRate);
    s << indent << "angleRes: ";
    Printer<float>::stream(s, indent + "  ", v.angleRes);
    s << indent << "angleIni: ";
    Printer<float>::stream(s, indent + "  ", v.angleIni);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOCOMPLASERROS_MESSAGE_LASERCONFDATA_H

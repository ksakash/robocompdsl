// Generated by gencpp from file RoboCompGenericBaseROS/TBaseState.msg
// DO NOT EDIT!


#ifndef ROBOCOMPGENERICBASEROS_MESSAGE_TBASESTATE_H
#define ROBOCOMPGENERICBASEROS_MESSAGE_TBASESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RoboCompGenericBaseROS
{
template <class ContainerAllocator>
struct TBaseState_
{
  typedef TBaseState_<ContainerAllocator> Type;

  TBaseState_()
    : x(0.0)
    , correctedX(0.0)
    , z(0.0)
    , correctedZ(0.0)
    , alpha(0.0)
    , correctedAlpha(0.0)
    , advVx(0.0)
    , advVz(0.0)
    , rotV(0.0)
    , isMoving(false)  {
    }
  TBaseState_(const ContainerAllocator& _alloc)
    : x(0.0)
    , correctedX(0.0)
    , z(0.0)
    , correctedZ(0.0)
    , alpha(0.0)
    , correctedAlpha(0.0)
    , advVx(0.0)
    , advVz(0.0)
    , rotV(0.0)
    , isMoving(false)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _correctedX_type;
  _correctedX_type correctedX;

   typedef float _z_type;
  _z_type z;

   typedef float _correctedZ_type;
  _correctedZ_type correctedZ;

   typedef float _alpha_type;
  _alpha_type alpha;

   typedef float _correctedAlpha_type;
  _correctedAlpha_type correctedAlpha;

   typedef float _advVx_type;
  _advVx_type advVx;

   typedef float _advVz_type;
  _advVz_type advVz;

   typedef float _rotV_type;
  _rotV_type rotV;

   typedef uint8_t _isMoving_type;
  _isMoving_type isMoving;





  typedef boost::shared_ptr< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> const> ConstPtr;

}; // struct TBaseState_

typedef ::RoboCompGenericBaseROS::TBaseState_<std::allocator<void> > TBaseState;

typedef boost::shared_ptr< ::RoboCompGenericBaseROS::TBaseState > TBaseStatePtr;
typedef boost::shared_ptr< ::RoboCompGenericBaseROS::TBaseState const> TBaseStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator1> & lhs, const ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.correctedX == rhs.correctedX &&
    lhs.z == rhs.z &&
    lhs.correctedZ == rhs.correctedZ &&
    lhs.alpha == rhs.alpha &&
    lhs.correctedAlpha == rhs.correctedAlpha &&
    lhs.advVx == rhs.advVx &&
    lhs.advVz == rhs.advVz &&
    lhs.rotV == rhs.rotV &&
    lhs.isMoving == rhs.isMoving;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator1> & lhs, const ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace RoboCompGenericBaseROS

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f75686144e8f9ccaaa6218ade0f3345";
  }

  static const char* value(const ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f75686144e8f9ccULL;
  static const uint64_t static_value2 = 0xaaa6218ade0f3345ULL;
};

template<class ContainerAllocator>
struct DataType< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RoboCompGenericBaseROS/TBaseState";
  }

  static const char* value(const ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 correctedX\n"
"float32 z\n"
"float32 correctedZ\n"
"float32 alpha\n"
"float32 correctedAlpha\n"
"float32 advVx\n"
"float32 advVz\n"
"float32 rotV\n"
"bool isMoving\n"
;
  }

  static const char* value(const ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.correctedX);
      stream.next(m.z);
      stream.next(m.correctedZ);
      stream.next(m.alpha);
      stream.next(m.correctedAlpha);
      stream.next(m.advVx);
      stream.next(m.advVz);
      stream.next(m.rotV);
      stream.next(m.isMoving);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TBaseState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RoboCompGenericBaseROS::TBaseState_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "correctedX: ";
    Printer<float>::stream(s, indent + "  ", v.correctedX);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "correctedZ: ";
    Printer<float>::stream(s, indent + "  ", v.correctedZ);
    s << indent << "alpha: ";
    Printer<float>::stream(s, indent + "  ", v.alpha);
    s << indent << "correctedAlpha: ";
    Printer<float>::stream(s, indent + "  ", v.correctedAlpha);
    s << indent << "advVx: ";
    Printer<float>::stream(s, indent + "  ", v.advVx);
    s << indent << "advVz: ";
    Printer<float>::stream(s, indent + "  ", v.advVz);
    s << indent << "rotV: ";
    Printer<float>::stream(s, indent + "  ", v.rotV);
    s << indent << "isMoving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isMoving);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOCOMPGENERICBASEROS_MESSAGE_TBASESTATE_H

[[[cog

import sys
sys.path.append('/home/ksakash/archives/robocomp/python')

import stringcase as sc
import cog
def A():
	cog.out('<@@<')
def Z():
	cog.out('>@@>')
def TAB():
	cog.out('<TABHERE>')
def SPACE(i=0):
	s = ''
	if i>0:
		s = str(i)
	cog.out('<S'+s+'>')

from dsl_parsers.dsl_factory import DSLFactory
customTypesList = []

includeDirectories = theIDSLPaths.split('#')
#idsl = gimmeIDSLStruct(theIDSL, files='', includeDirectories=includeDirectories)
idsl = DSLFactory().from_file(theIDSL)
#print ("idsl", idsl)
for imp in idsl['types']:
	if imp['type'] in ('sequence', 'struct'):
		customTypesList.append(imp)
	if imp['type'] == 'struct' and imp['name'] == structName:
		for structVar in imp['structIdentifiers']:
			wascustomType = False
			for customType in customTypesList:
				if structVar['identifier'] == customType['name']:
					if customType['type'] == 'sequence':
						if customType['typeSequence'] in ('float','int'):
							if rostype == 'ros2':
								cog.outl(customType['typeSequence'].split('/')[-1] +"32[] " + sc.snakecase(structVar[1]))
							else:
								cog.outl(customType['typeSequence'].replace('/','ROS/') +"32[] " + structVar[1])
						elif customType['typeSequence'] == 'string':
							if rostype == 'ros2':
								cog.outl(customType['typeSequence'].split('/')[-1] +"[] " + sc.snakecase(structVar[1]))
							else:
								cog.outl(customType['typeSequence'].replace('/','ROS/') +"[] " + structVar[1])
						else:
							if rostype == 'ros2':
								cog.outl(sc.pascalcase(customType['typeSequence'].split('/')[-1]) +"[] " + sc.snakecase(structVar[1]))
							else:
								cog.outl(customType['typeSequence'].replace('/','ROS/') +"[] " + structVar[1])
						wascustomType = True
						break
					elif structVar[0] == 'struct':
						if rostype == 'ros2':
							cog.outl(sc.pascalcase(customType['name'].split('/')[-1]) +" " + sc.snakecase(structVar[1]))
						else:
							cog.outl(customType['name'].replace('/','ROS/') +" " + structVar[1])
						wascustomType = True
						break
			if not wascustomType:
				if structVar['type'] in ('float','int'):
					if rostype == 'ros2':
						cog.outl(structVar['type']+"32 "+sc.snakecase(structVar['identifier']))
					else:
						cog.outl(structVar['type']+"32 "+structVar['identifier'])
				else:
					if rostype == 'ros2':
						str = structVar['type'].split('::')[-1]+" "+sc.snakecase(structVar['identifier'])
						cog.outl(str.replace("::", "ROS/"))
					else:
						str = structVar['type']+" "+structVar['identifier']
						cog.outl(str.replace("::", "ROS/"))
	elif imp['type'] == 'sequence' and imp['name'] == structName:
		msg = ''
		if imp['typeSequence'] in ('float','int'):
			if rostype == 'ros2':
				msg = imp['typeSequence'].split('::')[-1] +"32[] " + sc.snakecase(structName)
			else:
				msg = imp['typeSequence'] +"32[] " + structName
		elif imp['typeSequence'] == 'string':
			if rostype == 'ros2':
				msg = imp['typeSequence'].split('::')[-1] +"[] "+ sc.snakecase(structName)
			else:
				msg = imp['typeSequence'] +"[] "+ structName
		else:
			if rostype == 'ros2':
				msg = sc.pascalcase(imp['typeSequence'].split('::')[-1]) +"[] "+ sc.snakecase(structName)
			else:
				msg = imp['typeSequence'] +"[] "+ structName
		cog.outl(msg.replace("::", "ROS/"))
]]]
[[[end]]]

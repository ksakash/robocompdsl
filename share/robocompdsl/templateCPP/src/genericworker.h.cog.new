[[[cog

import sys
import re
import stringcase as sc
import glob

sys.path.append('/home/ksakash/archives/robocomp/python')

import cog
def A():
	cog.out('<@@<')
def Z():
	cog.out('>@@>')
def TAB():
	cog.out('<TABHERE>')

from os import listdir
from os.path import isfile, join
from dsl_parsers.dsl_factory import DSLFactory
from dsl_parsers.parsing_utils import getNameNumber, communicationIsIce, IDSLPool, isAGM1Agent, \
									  isAGM2Agent, containsMap, isTopicInterface

def makePublisherROS1 (component, interface, pool):
    interface_name = interface[0]
    module = pool.moduleProviding (interface_name)
    module_name = module['name']

    t_map = {}
    prf = module_name + 'ROS::'

    for t in module['types']:
        if t['type'] != 'dictionary' and t['type'] != 'exception':
            t_map[t['name']] = prf + t['name']

    for intf in module['interfaces']:
        if intf['name'] == interface_name and isTopicInterface (intf):
            for m in intf['methods']:
                method = intf['methods'][m]
                if len (method['params']) == 1:
                    for p in method['params']:
                        if '::' in p['type']:
                            t_map[m] = p['type'].replace ('::', 'ROS::')
                        else:
                            t_map[m] = prf + p['type']
                        break

    cog.outl ("class Publisher" + interface_name + " {\n")
    cog.outl ("public:\n")

    # publishers
    pub_declration = "\tros::Publisher pub_{};"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (pub_declration.format (name))

    # ros2 node
    cog.outl ("\n\tstd::shared_ptr<ros::NodeHandle> node;\n")

    cog.outl ("\tPublisher" + interface_name + " () {\n")

    # publisher initialization
    pub_definition = "\t\tpub_{} = node->advertise<{}>(\"{}\", 10);"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (pub_definition.format (name, type, name))

    cog.outl ("\n\t}\n")
    cog.outl ("\t~Publisher" + interface_name + " () {}\n")

    cog.outl ("};\n")

def makeSubscriberROS1 (component, interface, pool):
    interface_name = interface[0]
    module = pool.moduleProviding (interface_name)
    module_name = module['name']

    t_map = {}
    prf = module_name + 'ROS::'

    for t in module['types']:
        if t['type'] != 'dictionary' and t['type'] != 'exception':
            t_map[t['name']] = prf + t['name']

    for intf in module['interfaces']:
        if intf['name'] == interface_name and isTopicInterface (intf):
            for m in intf['methods']:
                method = intf['methods'][m]
                if len (method['params']) == 1:
                    for p in method['params']:
                        if '::' in p['type']:
                            t_map[m] = p['type'].replace ('::', 'ROS::')
                        else:
                            t_map[m] = prf + p['type']
                        break

    cog.outl ("class Subscriber" + interface_name + " {\n")
    cog.outl ("public:\n")

    # subscribers
    sub_declration = "\tros::Subscriber sub_{};"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (sub_declration.format (name))

    # ros2 node
    cog.outl ("\n\tstd::shared_ptr<ros::NodeHandle> node;\n")

    cog.outl ("\tSubscriber" + interface_name + " () {\n")

    # subscriber initialization
    sub_definition = "\t\tsub_{} = node->subscribe<{}>(\"{}\", 10, &Subscriber{}::cb_{}, this);"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (sub_definition.format (name, type, name, interface_name, name))

    cog.outl ("\n\t}\n")
    cog.outl ("\t~Subscriber" + interface_name + " () {}\n")

    # callback declaration
    cb_definition = "\tvoid cb_{} ({} ros_msg)"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (cb_definition.format (name, type) + " {}\n")

    cog.outl ("};\n")

def makeServerROS1 (component, interface, pool):
    interface_name = interface[0]
    module = pool.moduleProviding (interface_name)
    module_name = module['name']

    t_map = {}
    prf = module_name + 'ROS::'

    for intf in module['interfaces']:
        if intf['name'] == interface_name and not isTopicInterface (intf):
            for m in intf['methods']:
                method = intf['methods'][m]
                if not containsMap (method, module):
                    t_map[m] = prf + m

    cog.outl ("class Server" + interface_name + " {\n")
    cog.outl ("public:\n")

    # servers
    srv_declration = "\tros::ServiceServer server_{};"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (srv_declration.format (name))

    # ros2 node
    cog.outl ("\n\tstd::shared_ptr<ros::NodeHandle> node;\n")

    cog.outl ("\tServer" + interface_name + " () {\n")

    # server initialization
    srv_definition = "\t\tserver_{} = node->advertiseService(\"{}\", &Server{}::cb_{}, this);"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (srv_definition.format (name, name, interface_name, name))

    cog.outl ("\n\t}\n")
    cog.outl ("\t~Server" + interface_name + " () {}\n")

    # callback declaration
    cb_definition = "\tbool cb_{} ({}::Request& req, {}::Response& res)"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (cb_definition.format (name, type, type) + " { return true; }\n")

    cog.outl ("};\n")

def makeClientROS1 (component, interface, pool):
    interface_name = interface[0]
    module = pool.moduleProviding (interface_name)
    module_name = module['name']

    t_map = {}
    component_name = component['name']
    prf = component_name + '::srv::'

def makePublisherROS2 (component, interface, pool):
    interface_name = interface[0]
    module = pool.moduleProviding (interface_name)
    module_name = module['name']

    t_map = {}
    component_name = sc.snakecase (component['name'])
    prf = component_name + '::msg::'

    for t in module['types']:
        if t['type'] != 'dictionary' and t['type'] != 'exception':
            t_map[t['name']] = prf + sc.pascalcase (t['name'])

    for intf in module['interfaces']:
        if intf['name'] == interface_name and isTopicInterface (intf):
            for m in intf['methods']:
                method = intf['methods'][m]
                if len (method['params']) == 1:
                    for p in method['params']:
                        t_map[m] = prf + sc.pascalcase (p['type'].split('::')[-1])
                        break

    cog.outl ("class Publisher" + interface_name + " {\n")
    cog.outl ("public:\n")

    # publishers
    pub_declration = "\trclcpp::Publisher<{}>::SharedPtr pub_{};"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (pub_declration.format (type, name))

    # ros2 node
    cog.outl ("\n\trclcpp::Node::SharedPtr node;\n")

    cog.outl ("\tPublisher" + interface_name + " () {\n")

    # ros2 node initialization
    cog.outl ("\t\tnode = rclcpp::Node::make_shared (\"my_publisher\");\n")

    # publisher initialization
    pub_definition = "\t\tpub_{} = node->create_publisher<{}>(\"{}\", 10);"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (pub_definition.format (name, type, name))

    cog.outl ("\n\t}\n")
    cog.outl ("\t~Publisher" + interface_name + " () {}\n")

    cog.outl ("};\n")

def makeSubscriberROS2 (component, interface, pool):
    interface_name = interface[0]
    module = pool.moduleProviding (interface_name)
    module_name = module['name']

    t_map = {}
    component_name = sc.snakecase(component['name'])
    prf = component_name + '::msg::'

    for t in module['types']:
        if t['type'] != 'dictionary' and t['type'] != 'exception':
            t_map[t['name']] = prf + sc.pascalcase (t['name'])

    for intf in module['interfaces']:
        if intf['name'] == interface_name and isTopicInterface (intf):
            for m in intf['methods']:
                method = intf['methods'][m]
                if len (method['params']) == 1:
                    for p in method['params']:
                        t_map[m] = prf + sc.pascalcase (p['type'].split('::')[-1])
                        break

    cog.outl ("class Subscriber" + interface_name + " {\n")
    cog.outl ("public:\n")

    # subscribers
    sub_declaration = "\trclcpp::Subscription<{}>::SharedPtr sub_{};"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (sub_declaration.format (type, name))

    # ros2 node
    cog.outl ("\n\trclcpp::Node::SharedPtr node;\n")

    # ros2 data types
    cog.outl ("\tSubscriber" + interface_name + " () {\n")

    # ros2 node initialization
    cog.outl ("\t\tnode = rclcpp::Node::make_shared (\"my_subscriber\");\n")

    # subscriber initialization
    sub_definition = "\t\tsub_{} = node->create_subscription<{}>(\"{}\", 10, std::bind(&Subscriber{}::cb_{}, this, _1));"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (sub_definition.format (name, type, name, interface_name, name))

    cog.outl ("\n\t}\n")
    cog.outl ("\t~Subscriber" + interface_name + " () {}\n")
    cog.outl ("private:\n")

    # subscriber callback
    cb_definition = "\tvoid cb_{} (const {}::SharedPtr msg)"
    for key in t_map:
        name = key
        type = t_map[name]
        cog.outl (cb_definition.format (name, type) + " " + "{}\n")

    cog.outl ("};\n")

def makeServerROS2 (component, interface, pool):
    interface_name = interface[0]
    module = pool.moduleProviding (interface_name)
    module_name = module['name']

    t_map = {}
    component_name = sc.snakecase(component['name'])
    prf = component_name + '::srv::'

    for intf in module['interfaces']:
        if intf['name'] == interface_name and not isTopicInterface (intf):
            for m in intf['methods']:
                if not containsMap (intf['methods'][m], module):
                    t_map[m] = prf + sc.pascalcase (m)

    cog.outl ("class Server" + interface_name + " {\n")
    cog.outl ("public:\n")
    # servers declaration
    srv_declaration = "\trclcpp::Service<{}>::SharedPtr server_{};"
    for key in t_map:
        name = key
        data_type = t_map[name]
        cog.outl (srv_declaration.format (data_type, name))

    # ros2 node
    cog.outl ("\n\trclcpp::Node::SharedPtr node;\n")

    cog.outl ("\tServer" + interface_name + " () {\n")
    # ros2 node initialization
    cog.outl ("\t\tnode = rclcpp::Node::make_shared (\"my_server\");\n")

    # server initialization
    server_definition = \
        "\t\tserver_{} = node->create_service<{}>(\"{}\", std::bind(&Server{}::{}, this, _1, _2));"
    for key in t_map:
        name = key
        data_type = t_map[name]
        cog.outl (server_definition.format (name, data_type, name, interface_name, name))

    cog.outl ("\n\t}\n")
    cog.outl ("\t~Server" + interface_name + " () {}\n")
    cog.outl ("private:\n")
    # server callback
    server_cb = "\tvoid {} (const std::shared_ptr<{}::Request> req, std::shared_ptr<{}::Response> res)"
    for key in t_map:
        name = key
        data_type = t_map[name]
        cog.outl (server_cb.format (name, data_type, data_type) + " " + "{}\n")

    cog.outl ("};\n")

def makeClientROS2 (component, interface, pool):
    interface_name = interface[0]
    module = pool.moduleProviding (interface_name)
    module_name = module['name']

    t_map = {}
    component_name = sc.snakecase(component['name'])
    prf = component_name + '::srv::'

    for intf in module['interfaces']:
        if intf['name'] == interface_name and not isTopicInterface (intf):
            for m in intf['methods']:
                if not containsMap (intf['methods'][m], module):
                    t_map[m] = prf + sc.pascalcase (m)

    cog.outl ("class Client" + interface_name + " {\n")
    cog.outl ("public:\n")
    # servers declaration
    client_declaration = "\trclcpp::Client<{}>::SharedPtr client_{};"
    for key in t_map:
        name = key
        data_type = t_map[name]
        cog.outl (client_declaration.format (data_type, name))

    # ros2 node
    cog.outl ("\n\trclcpp::Node::SharedPtr node;\n")

    cog.outl ("\tClient" + interface_name + " () {\n")
    # ros2 node initialization
    cog.outl ("\t\tnode = rclcpp::Node::make_shared (\"my_client\");\n")

    # client initialization
    client_definition = "\t\tclient_{} = node->create_client<{}>(\"{}\");"
    for key in t_map:
        name = key
        data_type = t_map[name]
        cog.outl (client_definition.format (name, data_type, name, name))

    cog.outl ("\t}\n")
    cog.outl ("\t~Client" + interface_name + " () {}\n")

    cog.outl ("};\n")

includeDirectories = theIDSLPaths.split('#')
component = DSLFactory().from_file(theCDSL, include_directories=includeDirectories)
pool = IDSLPool(theIDSLs, includeDirectories)
sm = DSLFactory().from_file(component['statemachine'])

if sm is None:
    component['statemachine'] = None
if component is None:
	print('Can\'t locate', theCDSLs)
	sys.exit(1)

]]]
[[[end]]]

// ----------- ICE independent code -------------

#ifndef GENERICWORKER_H
#define GENERICWORKER_H

#include "config.h"
#include <stdint.h>
#include <qlog/qlog.h>

[[[cog
if component['gui'] is not None:
	cog.outl("#if Qt5_FOUND")
	cog.outl("<TABHERE>#include <QtWidgets>")
	cog.outl("#else")
	cog.outl("<TABHERE>#include <QtGui>")
	cog.outl("#endif")
	cog.outl("#include <ui_mainUI.h>")
]]]
[[[end]]]
[[[cog
if sm is not None:
	cog.outl("#include <QStateMachine>")
	cog.outl("#include <QState>")
	if component['statemachine_visual']:
	    cog.outl("#include \"statemachinewidget/qstateMachineWrapper.h\"")
]]]
[[[end]]]
#include <CommonBehavior.h>

[[[cog
usingList = []
for imp in component['recursiveImports'] + component["iceInterfaces"]:
	name = imp.split('/')[-1].split('.')[0]
	if not name in usingList:
		usingList.append(name)
for name in usingList:
	cog.outl('#include <'+name+'.h>')

def getROSList ():
    mypath = outputPath + '/src'
    myfiles = []
    for f in listdir (mypath):
        if not isfile (join (mypath, f)):
            dir = f
            newpath = join (mypath, f)
            files = [(dir + '/' + x.split('/')[-1]) for x in glob.glob (join (newpath, "*.h"))]
            myfiles += files

    return myfiles

# ICE and ROS headers
if component['usingROS']:

    cog.outl ("#include <ros/ros.h>")
    cog.outl ("#include <std_msgs/String.h>")
    cog.outl ("#include <std_msgs/Float32.h>")
    cog.outl ("#include <std_msgs/Int32.h>")
    cog.outl ("#include <std_msgs/Bool.h>")

    rosList = getROSList ()

    for f in rosList:
        cog.outl ("#include <" + f + ">")

def getROS2MsgList ():
    mypath = outputPath + '/msg'
    onlyfiles = [f.split('.')[0] for f in listdir(mypath) if isfile(join(mypath, f))]
    return onlyfiles

def getROS2SrvList ():
    mypath = outputPath + '/srv'
    onlyfiles = [f.split('.')[0] for f in listdir(mypath) if isfile(join(mypath, f))]
    return onlyfiles

if component['usingROS2']:

    cog.outl ("#include <rclcpp/rclcpp.hpp>")

    msgList = getROS2MsgList ()

    for msgFile in msgList:
        msg = sc.snakecase(msgFile)
        component_name = sc.snakecase(component['name'])
        cog.outl("#include <"+component_name+"/msg/"+msg+".hpp>")

    srvList = getROS2SrvList ()

    for srvFile in srvList:
        srv = sc.snakecase(srvFile)
        component_name = sc.snakecase(component['name'])
        cog.outl("#include <"+component_name+"/srv/"+srv+".hpp>")

try:
	if isAGM1Agent(component):
		cog.outl("#include <agm.h>")
	if isAGM2Agent(component):
		cog.outl("#include <AGM2.h>")
		cog.outl("#include <agm2.h>")
except:
	pass

]]]
[[[end]]]

[[[cog
    if 'agmagent' in [ x.lower() for x in component['options'] ]:
        cog.out('#include <agm.h>')
]]]
[[[end]]]

#define CHECK_PERIOD 5000
#define BASIC_PERIOD 100

using namespace std;
[[[cog
usingList = []
for imp in component['recursiveImports'] + component["iceInterfaces"]:
	name = imp.split('/')[-1].split('.')[0]
	if not name in usingList:
		usingList.append(name)

for name in usingList:
	cog.outl("using namespace RoboComp"+name+";")

if component['usingROS2']:
	cog.outl("using namespace std::chrono_literals;")
	cog.outl("using namespace std::placeholders;")

]]]
[[[end]]]

[[[cog
if component['language'].lower() == 'cpp':
	cog.outl("typedef map <string,::IceProxy::Ice::Object*> MapPrx;")
else:
	proxy_list = []
	for name in component['requires'] + component['publishes']:
		proxy_list.append("RoboComp" + name + "::" + name + "PrxPtr")
	cog.outl("using TuplePrx = std::tuple<" + ",".join(proxy_list) + ">;")
]]]
[[[end]]]

[[[cog
try:
	if 'agmagent' in [ x.lower() for x in component['options'] ]:
		cog.outl("""
		struct BehaviorParameters
		{
			RoboCompPlanning::Action action;
			std::vector< std::vector <std::string> > plan;
		};""")
except:
	pass

]]]
[[[end]]]

[[[cog
# ROS code in form of a class
for interface in component['publishes']:
    if not communicationIsIce (interface):
        if interface[1] == 'ros':
            makePublisherROS1 (component, interface, pool)
        else:
            makePublisherROS2 (component, interface, pool)

for interface in component['subscribesTo']:
    if not communicationIsIce (interface):
        if interface[1] == 'ros':
            makeSubscriberROS1 (component, interface, pool)
        else:
            makeSubscriberROS2 (component, interface, pool)

for interface in component['implements']:
    if not communicationIsIce (interface):
        if interface[1] == 'ros':
            makeServerROS1 (component, interface, pool)
        else:
            makeServerROS2 (component, interface, pool)

for interface in component['requires']:
    if not communicationIsIce (interface):
        if interface[1] == 'ros':
            makeClientROS1 (component, interface, pool)
        else:
            makeClientROS2 (component, interface, pool)
]]]
[[[end]]]

// mix of ROS and ICE
class GenericWorker :
[[[cog
if component['gui'] is not None:
	cog.outl("#ifdef USE_QTGUI\n<TABHERE>public " + component['gui'][1] + ", public Ui_guiDlg\n#else\n<TABHERE>public QObject\n #endif")
else:
	cog.outl("public QObject")
]]]
[[[end]]]
{
Q_OBJECT
public:
[[[cog
if component['language'].lower() == 'cpp':
	cog.outl("<TABHERE>GenericWorker(MapPrx& mprx);")
else:
	cog.outl("<TABHERE>GenericWorker(TuplePrx tprx);")
]]]
[[[end]]]
	virtual ~GenericWorker();
	virtual void killYourSelf();
	virtual void setPeriod(int p);

	virtual bool setParams(RoboCompCommonBehavior::ParameterList params) = 0;
	QMutex *mutex;

[[[cog

try:
	if 'agmagent' in [ x.lower() for x in component['options'] ]:
		cog.outl("<TABHERE>bool activate(const BehaviorParameters& parameters);")
		cog.outl("<TABHERE>bool deactivate();")
		cog.outl("<TABHERE>bool isActive() { return active; }")
except:
	pass

]]]
[[[end]]]
[[[cog
for name, num in getNameNumber(component['requires']):
	if communicationIsIce(name):
		if component['language'].lower() == "cpp":
			cog.outl('<TABHERE>'+name[0]+'Prx '+name[0].lower()+num +'_proxy;')
		else:
			cog.outl('<TABHERE>'+name[0]+'PrxPtr '+name[0].lower()+num +'_proxy;')

for name, num in getNameNumber(component['publishes']):
	if communicationIsIce(name):
		if component['language'].lower() == "cpp":
			cog.outl('<TABHERE>'+name[0]+'Prx '+name[0].lower()+num +'_pubproxy;')
		else:
			cog.outl('<TABHERE>'+name[0]+'PrxPtr '+name[0].lower()+num +'_pubproxy;')

]]]
[[[end]]]
[[[cog
if 'implements' in component:
    for implement in component['implements']:
        interface_name = implement[0]
        module = pool.moduleProviding(interface_name)
        if module == None:
            print ('\nCan\'t find module providing', interface_name, '\n')
            sys.exit(-1)
        for interface in module['interfaces']:
            if interface['name'] == interface_name:
                for method_name in interface['methods']:
                    method = interface['methods'][method_name]
                    paramStrA = ''
                    if communicationIsIce(implement):
                        for p in method['params']:
                            # delim
                            if paramStrA == '': delim = ''
                            else: delim = ', '
                            # decorator
                            ampersand = '&'
                            if p['decorator'] == 'out':
                                const = ''
                            else:
                                if component['language'].lower() == "cpp":
                                    const = 'const '
                                else:
                                    const = ''
                                    ampersand = ''
                                if p['type'].lower() in ['int', '::ice::int', 'float', '::ice::float']:
                                    ampersand = ''
                            # STR
                            paramStrA += delim + const + p['type'] + ' ' + ampersand + p['name']
                        cog.outl("<TABHERE>virtual " + method['return'] + ' ' + interface['name'] + "_" + method['name'] + '(' + paramStrA + ") = 0;")

if 'subscribesTo' in component:
	for implement in component['subscribesTo']:
		interface_name = implement[0]
		module = pool.moduleProviding(interface_name)
		if module == None:
			print ('\nCan\'t find module providing', interface_name, '\n')
			sys.exit(-1)
		for interface in module['interfaces']:
			if interface['name'] == interface_name:
				for method_name in interface['methods']:
					method = interface['methods'][method_name]
					paramStrA = ''
					if communicationIsIce(implement):
						for p in method['params']:
							# delim
							if paramStrA == '': delim = ''
							else: delim = ', '
							# decorator
							ampersand = '&'
							if p['decorator'] == 'out':
								const = ''
							else:
								if component['language'].lower() == "cpp":
									const = 'const '
								else:
									const = ''
									ampersand = ''
								if p['type'].lower() in ['int', '::ice::int', 'float', '::ice::float']:
									ampersand = ''
							# STR
							paramStrA += delim + const + p['type'] + ' ' + ampersand + p['name']
						cog.outl("<TABHERE>virtual " + method['return'] + ' ' + interface['name'] + "_" + method['name'] + '(' + paramStrA + ") = 0;")
]]]
[[[end]]]
protected:
[[[cog
if sm is not None:
    codQState = ""
    codQStateMachine = ""
    lsstates = ""
    if  not component['statemachine_visual']:
        codQStateMachine = "<TABHERE>QStateMachine " + sm['machine']['name'] + ";\n"
    else:
        codQStateMachine = "<TABHERE>QStateMachineWrapper " + sm['machine']['name'] + ";\n"
    if sm['machine']['contents']['states'] is not None:
        for state in sm['machine']['contents']['states']:
            aux = "<TABHERE>QState *" + state + "State;\n"
            lsstates += state +","
            if sm['substates'] is not None:
                for substates in sm['substates']:
                    if state == substates['parent']:
                        if substates['parallel'] is "parallel":
                            aux = "<TABHERE>QState *" + state + "State;\n"
                            break
            codQState += aux
    if sm['machine']['contents']['initialstate'] is not None:
        state = sm['machine']['contents']['initialstate']
        aux = "<TABHERE>QState *" + state + "State;\n"
        lsstates += state +","
        if sm['substates'] is not None:
            for substates in sm['substates']:
                if state == substates['parent']:
                    if substates['parallel'] is "parallel":
                        aux = "<TABHERE>QState *" + state + "State;\n"
                        break
        codQState += aux

    if sm['machine']['contents']['finalstate'] is not None:
        state = sm['machine']['contents']['finalstate']
        codQState +="<TABHERE>QFinalState *" + state + "State;\n"
        lsstates += state +","

    if sm['substates'] is not None:
        for substates in sm['substates']:
            if substates['contents']['states'] is not None:
                for state in substates['contents']['states']:
                    aux = "<TABHERE>QState *" + state + "State;\n"
                    lsstates += state +","
                    for sub in sm['substates']:
                        if state == sub['parent']:
                            if sub['parallel'] is "parallel":
                                aux = "<TABHERE>QState *" + state + "State;\n"
                                break
                    codQState += aux
            if substates['contents']['initialstate'] is not None:
                aux = "<TABHERE>QState *" + substates['contents']['initialstate'] + "State;\n"
                lsstates += state +","
                for sub in sm['substates']:
                    if state == sub['parent']:
                        if sub['parallel'] is "parallel":
                            aux = "<TABHERE>QState *" + state + "State;\n"
                            break
                codQState += aux
            if substates['contents']['finalstate'] is not None:
                codQState += "<TABHERE>QFinalState *" + substates['contents']['finalstate'] + "State;\n"
                lsstates += state +","

    cog.outl("//State Machine")
    cog.outl(codQStateMachine)
    cog.outl(codQState)
    cog.outl("//-------------------------")
]]]
[[[end]]]

	QTimer timer;
	int Period;
[[[cog
try:
	if 'agmagent' in [ x.lower() for x in component['options'] ]:
		cog.outl("<TABHERE>bool active;")
		cog.outl("<TABHERE>AGMModel::SPtr worldModel;")
		cog.outl("<TABHERE>BehaviorParameters p;")
		cog.outl("<TABHERE>ParameterMap params;")
		cog.outl("<TABHERE>int iter;")
		cog.outl("<TABHERE>bool setParametersAndPossibleActivation(const RoboCompAGMCommonBehavior::ParameterMap &prs, bool &reactivated);")
		cog.outl("<TABHERE>RoboCompPlanning::Action createAction(std::string s);")
except:
	pass

for interface in component['implements']:
    if not communicationIsIce (interface):
        cog.outl("<TABHERE>Server"+interface[0]+"* "+interface[0].lower()+"_proxy;")

for interface in component['requires']:
    if not communicationIsIce (interface):
        cog.outl("<TABHERE>Client"+interface[0]+"* "+interface[0].lower()+"_proxy;")

for interface in component['publishes']:
    if not communicationIsIce (interface):
        cog.outl("<TABHERE>Publisher"+interface[0]+"* "+interface[0].lower()+"_proxy;")

for interface in component['subscribesTo']:
    if not communicationIsIce (interface):
        cog.outl("<TABHERE>Subscriber"+interface[0]+"* "+interface[0].lower()+"_proxy;")

]]]
[[[end]]]

public slots:

[[[cog
if sm is not None:
    sm_virtual_methods = ""
    if sm['machine']['contents']['states'] is not None:
        for state in sm['machine']['contents']['states']:
            sm_virtual_methods += "<TABHERE>virtual void sm_" + state + "() = 0;\n"
    if sm['machine']['contents']['initialstate'] is not None    :
        sm_virtual_methods += "<TABHERE>virtual void sm_" + sm['machine']['contents']['initialstate'] + "() = 0;\n"
    if sm['machine']['contents']['finalstate'] is not None:
        sm_virtual_methods += "<TABHERE>virtual void sm_" + sm['machine']['contents']['finalstate'] + "() = 0;\n"
    if sm['substates'] is not None:
        for substates in sm['substates']:
            if substates['contents']['states'] is not None:
                for state in substates['contents']['states']:
                    sm_virtual_methods += "<TABHERE>virtual void sm_" + state + "() = 0;\n"
            if substates['contents']['initialstate'] is not None:
                sm_virtual_methods += "<TABHERE>virtual void sm_" + substates['contents']['initialstate'] + "() = 0;\n"
            if substates['contents']['finalstate'] is not None:
                sm_virtual_methods += "<TABHERE>virtual void sm_" + substates['contents']['finalstate'] + "() = 0;\n"
    cog.outl("//Slots funtion State Machine")
    cog.outl(sm_virtual_methods)
    cog.outl("//-------------------------")

if (sm is not None and sm['machine']['default'] is True) or component['statemachine'] is None:
    cog.outl("<TABHERE>virtual void compute() = 0;")
]]]
[[[end]]]
    virtual void initialize(int period) = 0;

signals:
	void kill();
[[[cog
if sm is not None:
    codsignals = ""
    if sm['machine']['contents']['transitions'] is not None:
        for transi in sm['machine']['contents']['transitions']:
            for dest in transi['dests']:
                codsignals += "<TABHERE>void t_" +  transi['src'] + "_to_" + dest + "();\n"
    if sm['substates'] is not None:
        for substates in sm['substates']:
            if substates['contents']['transitions'] is not None:
                for transi in substates['contents']['transitions']:
                    for dest in transi['dests']:
                        codsignals += "<TABHERE>void t_" + transi['src'] + "_to_" + dest + "();\n"
    cog.outl("//Signals for State Machine")
    cog.outl(codsignals)
    cog.outl("//-------------------------")
]]]
[[[end]]]
};

#endif

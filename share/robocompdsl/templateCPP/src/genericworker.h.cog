/*
[[[cog

import sys
import re
import stringcase as sc

sys.path.append('/home/ksakash/archives/robocomp/python')

import cog
def A():
	cog.out('<@@<')
def Z():
	cog.out('>@@>')
def TAB():
	cog.out('<TABHERE>')

def isPub(method):
	returnTypeVoid = (method['return'] == 'void')
	paramWithOut = False
	moreThanOne = not (len(method['params']) == 1)
	for param in method['params']:
		if param['decorator'] == 'out':
			paramWithOut = True
			break
	return returnTypeVoid and (not paramWithOut) and (not moreThanOne)

def camel_to_snake(name):
  name = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', name).lower()

def snake_to_camel(word):
    return ''.join(x.capitalize() or '_' for x in word.split('_'))

from dsl_parsers.dsl_factory import DSLFactory
from dsl_parsers.parsing_utils import getNameNumber, communicationIsIce, IDSLPool, isAGM1Agent,isAGM2Agent
includeDirectories = theIDSLPaths.split('#')
component = DSLFactory().from_file(theCDSL, include_directories=includeDirectories)
sm = DSLFactory().from_file(component['statemachine'])
if sm is None:
    component['statemachine'] = None
if component is None:
	print('Can\'t locate', theCDSLs)
	sys.exit(1)

pool = IDSLPool(theIDSLs, includeDirectories)
includeList = pool.rosImports()
rosTypes = pool.getRosTypes()

]]]
[[[end]]]
 *    Copyright (C)
[[[cog
A()
import datetime
cog.out(str(datetime.date.today().year))
Z()
]]]
[[[end]]]
 by YOUR NAME HERE
 *
 *    This file is part of RoboComp
 *
 *    RoboComp is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    RoboComp is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with RoboComp.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef GENERICWORKER_H
#define GENERICWORKER_H

#include "config.h"
#include <stdint.h>
#include <qlog/qlog.h>

[[[cog
if component['gui'] is not None:
	cog.outl("#if Qt5_FOUND")
	cog.outl("<TABHERE>#include <QtWidgets>")
	cog.outl("#else")
	cog.outl("<TABHERE>#include <QtGui>")
	cog.outl("#endif")
	cog.outl("#include <ui_mainUI.h>")
]]]
[[[end]]]
[[[cog
if sm is not None:
	cog.outl("#include <QStateMachine>")
	cog.outl("#include <QState>")
	if component['statemachine_visual']:
	    cog.outl("#include \"statemachinewidget/qstateMachineWrapper.h\"")
]]]
[[[end]]]
#include <CommonBehavior.h>

[[[cog
usingList = []
for imp in component['recursiveImports'] + component["iceInterfaces"]:
	name = imp.split('/')[-1].split('.')[0]
	if not name in usingList:
		usingList.append(name)
for name in usingList:
	cog.outl('#include <'+name+'.h>')


if component['usingROS'] == True:
	cog.outl('#include <ros/ros.h>')
	for include in includeList:
		cog.outl('#include <'+include+'.h>')
	srvIncludes = {}
	for imp in component['requires']:
		if type(imp) == str:
			im = imp
		else:
			im = imp[0]
		if not communicationIsIce(imp):
			module = pool.moduleProviding(im)
			for interface in module['interfaces']:
				if interface['name'] == im:
					for mname in interface['methods']:
						srvIncludes[mname] = '#include <'+module['name']+'ROS/'+mname+'.h>'
	for imp in component['implements']:
		if type(imp) == str:
			im = imp
		else:
			im = imp[0]
		if not communicationIsIce(imp):
			module = pool.moduleProviding(im)
			for interface in module['interfaces']:
				if interface['name'] == im:
					for mname in interface['methods']:
						srvIncludes[mname] = '#include <'+module['name']+'ROS/'+mname+'.h>'
	for srv in srvIncludes.values():
		cog.outl(srv)

def getMsgIncludeListROS2 (module):
	msgIncludeList = []
	component_name = camel_to_snake(component['name'])
	for t in module['types']:
		if t['type'] != 'dictionary':
			msgIncludeList.append("#include <"+component_name+"/msg/"+camel_to_snake(t['name'].split('::')[-1])+".hpp>")

	for interface in module['interfaces']:
		for method in interface['methods']:
			m = interface['methods'][method]
			if isPub (m):
				p = m['params'][0]
				if p['type'] in ('float','int'):
					msgIncludeList.append("#include <std_msgs/msg/"+camel_to_snake(p['type']+"32")+".hpp>")
				elif p['type'] in ('uint8','uint16','uint32','uint64'):
					msgIncludeList.append("#include <std_msgs/msg/"+camel_to_snake("UInt"+p['type'].split('t')[1]+"32")+".hpp>")
				elif p['type'] in rosTypes:
					msgIncludeList.append("#include <std_msgs/msg/"+camel_to_snake(p['type'])+".hpp>")
				elif '::' in p['type']:
					msgIncludeList.append("#include <"+component_name+"/msg/"+camel_to_snake(p['type'].split('::')[-1])+".hpp>")
				else:
					msgIncludeList.append("#include <"+component_name+"/msg/"+camel_to_snake(p['type'])+".hpp>")
	return msgIncludeList

def isSrv(method):
    returnTypeVoid = (method['return'] != 'void')
    paramWithOut = False
    for param in method['params']:
        if param['decorator'] == 'out':
            paramWithOut = True
    return returnTypeVoid or paramWithOut

def getSrvIncludeListROS2 (module):
	srvIncludeList = []
	component_name = camel_to_snake(component['name'])
	for interface in module['interfaces']:
		for method in interface['methods']:
			m = interface['methods'][method]
			if isSrv (m):
				srvIncludeList.append ("#include <"+component_name+"/srv/"+camel_to_snake(method)+".hpp>")

if component['usingROS2']:
	cog.outl('#include <rclcpp/rclcpp.hpp>')

	"""
	for interface in component['publishes'] + component['subscribesTo']:
		interface = interface[0]
		module = pool.moduleProviding(interface)
		msgIncludeList = getMsgIncludeListROS2 (module)
		for include in msgIncludeList:
			cog.outl(include)

	for interface in (component['requires'] + component['implements']):
		interface = interface[0]
		module = pool.moduleProviding(interface)
		srvIncludeList = getSrvIncludeListROS2 (module)
		for include in srvIncludeList:
			cog.outl(include)
	"""

	from os import listdir
	from os.path import isfile, join

	def getMsgList ():
		mypath = outputPath + '/msg'
		onlyfiles = [f.split('.')[0] for f in listdir(mypath) if isfile(join(mypath, f))]
		return onlyfiles

	msgList = getMsgList ()

	for msgFile in msgList:
		msg = sc.snakecase(msgFile)
		component_name = sc.snakecase(component['name'])
		cog.outl("#include <"+component_name+"/msg/"+msg+".hpp>")

	def getSrvList ():
		mypath = outputPath + '/srv'
		onlyfiles = [f.split('.')[0] for f in listdir(mypath) if isfile(join(mypath, f))]
		return onlyfiles

	srvList = getSrvList ()

	for srvFile in srvList:
		srv = sc.snakecase(srvFile)
		component_name = sc.snakecase(component['name'])
		cog.outl("#include <"+component_name+"/srv/"+srv+".hpp>")

try:
	if isAGM1Agent(component):
		cog.outl("#include <agm.h>")
	if isAGM2Agent(component):
		cog.outl("#include <AGM2.h>")
		cog.outl("#include <agm2.h>")
except:
	pass
]]]
[[[end]]]

[[[cog
	if 'agmagent' in [ x.lower() for x in component['options'] ]:
		cog.out('#include <agm.h>')
]]]
[[[end]]]

#define CHECK_PERIOD 5000
#define BASIC_PERIOD 100

using namespace std;
[[[cog
usingList = []
for imp in component['recursiveImports'] + component["iceInterfaces"]:
	name = imp.split('/')[-1].split('.')[0]
	if not name in usingList:
		usingList.append(name)
for name in usingList:
	cog.outl("using namespace RoboComp"+name+";")

if component['usingROS2']:
	cog.outl("using namespace std::chrono_literals;")
	cog.outl("using namespace std::placeholders;")

]]]
[[[end]]]

[[[cog
if component['language'].lower() == 'cpp':
	cog.outl("typedef map <string,::IceProxy::Ice::Object*> MapPrx;")
else:
	proxy_list = []
	for name in component['requires'] + component['publishes']:
		proxy_list.append("RoboComp" + name + "::" + name + "PrxPtr")
	cog.outl("using TuplePrx = std::tuple<" + ",".join(proxy_list) + ">;")
]]]
[[[end]]]

[[[cog
try:
	if 'agmagent' in [ x.lower() for x in component['options'] ]:
		cog.outl("""
		struct BehaviorParameters
		{
			RoboCompPlanning::Action action;
			std::vector< std::vector <std::string> > plan;
		};""")
except:
	pass

]]]
[[[end]]]

[[[cog
if component['usingROS'] or component['usingROS2']:
	#CREANDO CLASES PARA LOS PUBLISHERS
	for imp in component['publishes']:
		nname = imp
		while type(nname) != type(''):
			nname = nname[0]
		module = pool.moduleProviding(nname)
		if module == None:
			print ('\nCan\'t find module providing', nname, '\n')
			sys.exit(-1)
		if not communicationIsIce(imp):
			theIdsl = pool.IDSLsModule(module)
			idsl = DSLFactory().from_file(theIdsl)
            # cog.outl("// class for rosPublisher")
			cog.outl("class Publisher"+nname+"\n{\npublic:")
			"""
			for interface in module['interfaces']:
				if interface['name'] == nname:
					for mname in interface['methods']:
						method = interface['methods'][mname]
						cog.outl("<TABHERE>ros::Publisher pub_"+mname+";")
			"""

			pub_data_map = dict()
			cog.outl("<TABHERE>// publisher for every data types in the given interfaces")
			component_name = camel_to_snake(component['name'])
			for t in module['types']:
				if t['type'] != 'dictionary':
					pub_data_map[t['name']] = dict()
					"""
					if '::' in t['name']:
						if component['usingROS']:
							pub_data_map[t['name']]['type'] = t['type'].replace('::', 'ROS::')
						else:
							pub_data_map[t['name']]['type'] = component_name + "::msg::" + t['name'].split('::')[-1]
						pub_data_map[t['name']]['topic'] = ''
					else:
					"""
					if component['usingROS']:
						pub_data_map[t['name']]['type'] = module['name'] + 'ROS::' + t['name']
					else:
						pub_data_map[t['name']]['type'] = component_name + "::msg::" + sc.pascalcase(t['name'])
					pub_data_map[t['name']]['topic'] = ''
					if component['usingROS']:
						cog.outl("<TABHERE>ros::Publisher pub_"+t['name'].split('::')[-1]+";")
					else:
						cog.outl("<TABHERE>rclcpp::Publisher<"+pub_data_map[t['name']]['type']+">::SharedPtr pub_"+t['name']+";")

			for interface in module['interfaces']:
				for method in interface['methods']:
					m = interface['methods'][method]
					if isPub (m):
						p = m['params'][0]
						p_name = m['name']
						pub_data_map[p_name] = dict()
						component_name = camel_to_snake(component['name'])
						if p['type'] in ('float','int'):
							if component['usingROS']:
								pub_data_map[p_name]['type'] = "std_msgs::"+p['type'].capitalize()+"32"
							else:
								pub_data_map[p_name]['type'] = "std_msgs::msg::"+sc.pascalcase(p['type']+"32")
						elif p['type'] in ('uint8','uint16','uint32','uint64'):
							if component['usingROS']:
								pub_data_map[p_name]['type'] = "std_msgs::UInt"+p['type'].split('t')[1]+"32"
							else:
								pub_data_map[p_name]['type'] = "std_msgs::msg::"+sc.pascalcase("UInt"+p['type'].split('t')[1]+"32")
						elif p['type'] in rosTypes:
							if component['usingROS']:
								pub_data_map[p_name]['type'] = "std_msgs::"+p['type'].capitalize()
							else:
								pub_data_map[p_name]['type'] = "std_msgs::msg::"+sc.pascalcase(p['type'])
						elif '::' in p['type']:
							if component['usingROS']:
								pub_data_map[p_name]['type'] = p['type'].replace('::', 'ROS::')
							else:
								pub_data_map[p_name]['type'] = component_name+"::msg::"+sc.pascalcase(p['type'].split('::')[-1])
						else:
							if component['usingROS']:
								pub_data_map[p_name]['type'] = module['name'] + "ROS::" + p['type']
							else:
								pub_data_map[p_name]['type'] = component_name + '::msg::' + sc.pascalcase(p['type'])
						pub_data_map[p_name]['topic'] = interface['name']
						if component['usingROS']:
							cog.outl("<TABHERE>ros::Publisher pub_"+p_name+";")
						else:
							cog.outl("<TABHERE>rclcpp::Publisher<"+pub_data_map[p_name]['type']+">::SharedPtr pub_"+p_name+";")
			if component['usingROS2']:
				cog.outl("<TABHERE>rclcpp::Node::SharedPtr node;\n")
			if component['usingROS']:
				cog.outl("<TABHERE>Publisher"+nname+"(ros::NodeHandle *node)\n<TABHERE>{")
			elif component['usingROS2']:
				cog.outl("<TABHERE>Publisher"+nname+"()\n<TABHERE>{")

			if component['usingROS2']:
				cog.outl("<TABHERE><TABHERE>node = rclcpp::Node::make_shared(\"my_publisher\");")

			if component['usingROS']:
				cog.outl("<TABHERE><TABHERE>// publisher = node->advertise<datatype>(\"topic\", 1000)")
			else:
				cog.outl("<TABHERE><TABHERE>// publisher = node->create_publisher<data_type>(\"topic\", 10);")

			for key in pub_data_map:
				name = key
				type = pub_data_map[key]['type']
				topic = pub_data_map[key]['topic']
				if (topic != ''):
					if component['usingROS']:
						cog.outl("<TABHERE><TABHERE>pub_"+name+" = node->advertise<"+type+">(node->resolveName("+topic+"), 1000);")
					else:
						cog.outl("<TABHERE><TABHERE>pub_"+name+" = node->create_publisher<"+type+">(\"+topic+\", 10);")

			type_map = dict()
			for type in module['types']:
				if 'type' in type:
					type_map[module['name'] + '::' + type['name']] = type['type']

			"""
			for interface in module['interfaces']:
				if interface['name'] == nname:
					for mname in interface['methods']:
						method = interface['methods'][mname]
						check = False
						for p in method['params']:
							name = p['type'] if '::' in p['type'] else module['name'] + '::' + p['type']
							if (name in type_map) and (type_map[name] == 'dictionary'):
								check = True
								break
						if check:
							continue
						for p in method['params']:
							s = "\""+mname+"\""
							if p['type'] in ('float','int'):
								cog.outl("<TABHERE><TABHERE>pub_"+mname+" = node->advertise<std_msgs::"+p['type'].capitalize()+"32>(node->resolveName("+s+"), 1000);")
							elif p['type'] in ('uint8','uint16','uint32','uint64'):
								cog.outl("<TABHERE><TABHERE>pub_"+mname+" = node->advertise<std_msgs::UInt"+p['type'].split('t')[1]+"32>(node->resolveName("+s+"), 1000);")
							elif p['type'] in rosTypes:
								cog.outl("<TABHERE><TABHERE>pub_"+mname+" = node->advertise<std_msgs::"+p['type'].capitalize()+">(node->resolveName("+s+"), 1000);")
							elif '::' in p['type']:
								cog.outl("<TABHERE><TABHERE>pub_"+mname+" = node->advertise<"+p['type'].replace("::","ROS::")+">(node->resolveName("+s+"), 1000);")
							else:
								cog.outl("<TABHERE><TABHERE>pub_"+mname+" = node->advertise<"+module['name']+"ROS::"+p['type']+">(node->resolveName("+s+"), 1000);")
			"""
			cog.outl("<TABHERE>}")

			cog.outl("<TABHERE>~Publisher"+nname+"(){}")

			"""
			for interface in module['interfaces']:
				if interface['name'] == nname:
					for mname in interface['methods']:
						method = interface['methods'][mname]
						check = False
						for p in method['params']:
							name = p['type'] if '::' in p['type'] else module['name'] + '::' + p['type']
							if (name in type_map) and (type_map[name] == 'dictionary'):
								check = True
								break
						if check:
							continue
						if not isPub (method):
							continue
						for p in method['params']:
							if p['type'] in ('float','int'):
								cog.outl("<TABHERE>void "+mname+"(std_msgs::"+p['type'].capitalize()+"32 "+p['name']+")")
								cog.outl("<TABHERE>{\n<TABHERE><TABHERE>pub_"+mname+".publish("+p['name']+");")
								cog.outl("<TABHERE>}")
							elif p['type'] in ('uint8','uint16','uint32','uint64'):
								cog.outl("<TABHERE>void "+mname+"(std_msgs::UInt"+p['type'].split('t')[1]+" "+p['name']+")")
								cog.outl("<TABHERE>{\n<TABHERE><TABHERE>pub_"+mname+".publish("+p['name']+");")
								cog.outl("<TABHERE>}")
							elif p['type'] in rosTypes:
								cog.outl("<TABHERE>void "+mname+"(std_msgs::"+p['type'].capitalize()+" "+p['name']+")")
								cog.outl("<TABHERE>{\n<TABHERE><TABHERE>pub_"+mname+".publish("+p['name']+");")
								cog.outl("<TABHERE>}")
							elif '::' in p['type']:
								cog.outl("<TABHERE>void "+mname+"("+p['type'].replace("::","ROS::")+" "+p['name']+")")
								cog.outl("<TABHERE>{\n<TABHERE><TABHERE>pub_"+mname+".publish("+p['name']+");")
								cog.outl("<TABHERE>}")
							else:
								cog.outl("<TABHERE>void "+mname+"("+module['name']+"ROS::"+p['type']+" "+p['name']+")")
								cog.outl("<TABHERE>{\n<TABHERE><TABHERE>pub_"+mname+".publish("+p['name']+");")
								cog.outl("<TABHERE>}")
			"""

			import_types = []
			recursive_import_types = []

			if (module['imports'] != ''):
				import_types = DSLFactory().from_file (module['imports'])['types']
			if (module['recursive_imports'] != ''):
				recursive_import_types = DSLFactory().from_file (module['recursive_imports'])['types']

			module['types'] += import_types + recursive_import_types

			for interface in module['interfaces']:
				for m in interface['methods']:
					method = interface['methods'][m]
					if isPub (method) and m in pub_data_map:
						p_name = method['params'][0]['name']
						t = method['params'][0]['type'] if ('::' in method['params'][0]['type']) else (module['name'] + '::' + method['params'][0]['type'])
						cog.outl("<TABHERE>void "+method['name']+" ("+t+" "+p_name+") {")
						cog.outl("<TABHERE><TABHERE>"+pub_data_map[m]['type']+" "+"ros_msg;")
						cog.outl("<TABHERE><TABHERE>// convert the ICE data type into ROS message")
						cog.outl("<TABHERE><TABHERE>pub_"+m+".publish(ros_msg);")
						cog.outl("<TABHERE>}")
			cog.outl("};")

	if component['usingROS2']:
		for imp in component['subscribesTo']:
			nname = imp
			if (len(imp) == 2 and nname[1] == 'ros2'):
				nname = imp[0]
			else:
				continue
			module = pool.moduleProviding(nname)
			if module == None:
				print ('\nCan\'t find module providing', nname, '\n')
				sys.exit(-1)
			if not communicationIsIce(imp):
				theIdsl = pool.IDSLsModule(module)
				idsl = DSLFactory().from_file(theIdsl)

				cog.outl("class Subscriber"+nname+"\n{\npublic:")

				sub_data_map = dict()
				cog.outl("<TABHERE>// subscriber for every data types in the given interfaces")
				component_name = camel_to_snake(component['name'])
				for t in module['types']:
					if t['type'] != 'dictionary':
						sub_data_map[t['name']] = dict()

						sub_data_map[t['name']]['type'] = component_name + "::msg::" + sc.pascalcase(t['name'])
						sub_data_map[t['name']]['topic'] = ''

						cog.outl("<TABHERE>rclcpp::Subscription<"+sub_data_map[t['name']]['type']+">::SharedPtr sub_"+t['name']+";")

				for interface in module['interfaces']:
					for method in interface['methods']:
						m = interface['methods'][method]
						if isPub (m):
							p = m['params'][0]
							p_name = m['name']
							sub_data_map[p_name] = dict()
							component_name = camel_to_snake(component['name'])
							if p['type'] in ('float','int'):
								sub_data_map[p_name]['type'] = "std_msgs::msg::"+sc.pascalcase(p['type']+"32")
							elif p['type'] in ('uint8','uint16','uint32','uint64'):
								sub_data_map[p_name]['type'] = "std_msgs::msg::"+sc.pascalcase("UInt"+p['type'].split('t')[1]+"32")
							elif p['type'] in rosTypes:
								sub_data_map[p_name]['type'] = "std_msgs::msg::"+sc.pascalcase(p['type'])
							elif '::' in p['type']:
								sub_data_map[p_name]['type'] = component_name+"::msg::"+sc.pascalcase(p['type'].split('::')[-1])
							else:
								sub_data_map[p_name]['type'] = component_name + '::msg::' + sc.pascalcase(p['type'])
							sub_data_map[p_name]['topic'] = interface['name']
							cog.outl("<TABHERE>rclcpp::Subscription<"+sub_data_map[p_name]['type']+">::SharedPtr sub_"+p_name+";")

				cog.outl("\n")
				for key in sub_data_map:
					name = key
					type = sub_data_map[key]['type']
					topic = sub_data_map[key]['topic']
					cog.outl("<TABHERE>"+type+" msg_"+name+";")

				cog.outl("\n<TABHERE>rclcpp::Node::SharedPtr node;\n")
				cog.outl("<TABHERE>Subscriber"+nname+"()\n<TABHERE>{")

				cog.outl("<TABHERE><TABHERE>node = rclcpp::Node::make_shared(\"my_subscriber\");")

				for key in sub_data_map:
					name = key
					type = sub_data_map[key]['type']
					topic = sub_data_map[key]['topic']
					if (topic != ''):
						cog.outl("<TABHERE><TABHERE>sub_"+name+" = node->create_subscription<"+type+">(\""+topic+"\", 10);")
					else:
						cog.outl("<TABHERE><TABHERE>// sub_"+name+" = node->create_subscription<"+type+">(<topic>, 10);")

				type_map = dict()
				for type in module['types']:
					if 'type' in type:
						type_map[module['name'] + '::' + type['name']] = type['type']

				cog.outl("<TABHERE>}\n")
				cog.outl("<TABHERE>~Subscriber"+nname+"(){}\n")
				cog.outl("private:\n")

				import_types = []
				recursive_import_types = []

				"""
				if (module['imports'] != ''):
					import_types = DSLFactory().from_file (module['imports'])['types']
				if (module['recursive_imports'] != ''):
					recursive_import_types = DSLFactory().from_file (module['recursive_imports'])['types']

				module['types'] += import_types + recursive_import_types
				"""

				component_name = sc.snakecase(component['name'])
				for t in module['types']:
					if t['type'] != 'dictionary':
						d_type = ''
						n = t['name'].split('::')[-1]
						d_type = component_name + "::msg::" + sc.pascalcase(t['name'])
						cog.outl("<TABHERE>void cb_"+n+"(const " + d_type + "::SharedPtr ros_msg) {}")

				for interface in module['interfaces']:
					for method in interface['methods']:
						m = interface['methods'][method]
						if isPub (m):
							p = m['params'][0]
							p_name = m['name']
							d_type = ''
							if p['type'] in ('float','int'):
								d_type = "std_msgs::msg::"+sc.pascalcase(p['type']+"32")
							elif p['type'] in ('uint8','uint16','uint32','uint64'):
								d_type = "std_msgs::msg::"+sc.pascalcase("UInt"+p['type'].split('t')[1]+"32")
							elif p['type'] in rosTypes:
								d_type = "std_msgs::msg::"+sc.pascalcase(p['type'])
							elif '::' in p['type']:
								d_type = component_name+"::msg::"+sc.pascalcase(p['type'].split('::')[-1])
							else:
								d_type = component_name + '::msg::' + sc.pascalcase(p['type'])
							cog.outl("<TABHERE>void cb_"+p_name+"(const "+d_type+"::SharedPtr ros_msg) {}")
				cog.outl("};\n")

	if component['usingROS2']:
		for imp in component['implements']:
			nname = imp
			if (len(imp) == 2 and nname[1] == 'ros2'):
				nname = imp[0]
			else:
				continue
			module = pool.moduleProviding(nname)
			if module == None:
				print ('\nCan\'t find module providing', nname, '\n')
				sys.exit(-1)
			if not communicationIsIce(imp) and imp[1] == 'ros2':
				theIdsl = pool.IDSLsModule(module)
				idsl = DSLFactory().from_file(theIdsl)

				cog.outl("class Server"+nname+"\n{\npublic:")
				component_name = camel_to_snake(component['name'])

				for interface in module['interfaces']:
					for method in interface['methods']:
						m = interface['methods'][method]
						if isSrv (m):
							cog.outl("<TABHERE>rclcpp::Service<"+component_name+"::srv::"+sc.pascalcase(m['name'])+">::SharedPtr server_"+m['name']+";")

				cog.outl("\n")

				cog.outl("\n<TABHERE>rclcpp::Node::SharedPtr node;\n")
				cog.outl("<TABHERE>Server"+nname+"()\n<TABHERE>{")

				cog.outl("<TABHERE><TABHERE>node = rclcpp::Node::make_shared(\"my_subscriber\");")

				for interface in module['interfaces']:
					for method in interface['methods']:
						m = interface['methods'][method]
						if isSrv (m):
							cog.outl("<TABHERE><TABHERE>server_"+m['name']+" = node->create_service<"+\
							component_name+"::srv::"+sc.pascalcase(m['name'])+">(\""+m['name']\
							+"\", std::bind (&Server"+interface['name']+"::"+m['name']+", this, _1, _2));")

				cog.outl("<TABHERE>}\n")
				cog.outl("<TABHERE>~Server"+nname+"(){}\n")
				cog.outl("private:\n")

				component_name = sc.snakecase(component['name'])

				for interface in module['interfaces']:
					for method in interface['methods']:
						m = interface['methods'][method]
						if isSrv (m):
							cog.outl("<TABHERE>void "+m['name']+" (const std::shared_ptr<"+\
							component_name+"::srv::"+sc.pascalcase(m['name'])+"::Request> req, "+\
							"std::shared_ptr<"+component_name+"::srv::"+sc.pascalcase(m['name'])+\
							"::Response> res) {}")
				cog.outl("};\n")

	#CREANDO CLASES PARA LOS REQUIRES
	for imp in component['requires']:
		nname = imp
		while type(nname) != type(''):
			nname = nname[0]
		module = pool.moduleProviding(nname)
		if module == None:
			print ('\nCan\'t find module providing', nname, '\n')
			sys.exit(-1)
		if not communicationIsIce(imp):
			cog.outl("//class for rosServiceClient")
			if imp[1] == 'ros':
				cog.outl("class ServiceClient"+nname+"\n{\npublic:")
			else:
				cog.outl("class Client"+nname+"\n{\npublic:")

			component_name = sc.snakecase(component['name'])

			for interface in module['interfaces']:
				if interface['name'] == nname:
					for mname in interface['methods']:
						method = interface['methods'][mname]
						if imp[1] == 'ros':
							cog.outl("<TABHERE>ros::ServiceClient srv_"+mname+";")
						else:
							cog.outl("<TABHERE>rclcpp::Client<"+component_name+"::srv::"+sc.pascalcase(mname)+">::SharedPtr client_"+mname+";")
				if imp[1] == 'ros2':
					cog.outl("\n<TABHERE>rclcpp::Node::SharedPtr node;\n")
			if imp[1] == 'ros':
				cog.outl("<TABHERE>ServiceClient"+nname+"(ros::NodeHandle *node)\n<TABHERE>{")
			else:
				cog.outl("<TABHERE>Client"+nname+"()\n<TABHERE>{")

			for interface in module['interfaces']:
				if interface['name'] == nname:
					if imp[1] == 'ros2':
						cog.outl ("<TABHERE><TABHERE>node = rclcpp::Node::make_shared(\"my_client\");")
					for mname in interface['methods']:
						method = interface['methods'][mname]
						s = "\""+mname+"\""
						if imp[1] == 'ros':
							cog.outl("<TABHERE><TABHERE>srv_"+mname+" = node->serviceClient<"+module['name']+"ROS::"+mname+">(node->resolveName("+s+"), 1000);")
						else:
							cog.outl("<TABHERE><TABHERE>client_"+mname+" = node->create_client<"+component_name+"::srv::"+sc.pascalcase(mname)+">("+s+");")
			cog.outl("<TABHERE>}\n")
			if imp[1] == 'ros':
				cog.outl("<TABHERE>~ServiceClient"+nname+"(){}\n")
			else:
				cog.outl("<TABHERE>~Client"+nname+"(){}\n")
			# theIdsl = pool.IDSLsModule(module)
			# idsl = IDSLParsing.fromFileIDSL(theIdsl)
			# idsl = DSLFactory().from_file(theIdsl)
			"""
			for interface in module['interfaces']:
				if interface['name'] == nname:
					for mname in interface['methods']:
						method = interface['methods'][mname]
						methodDef = "<TABHERE>bool "+mname
						methodContent = module['name']+"ROS::"+mname+" srv;\n"
						firstParam = True
						array = []
						for p in method['params']:
							if p['type'] in ('float','int'):
								temp = "std_msgs::"+p['type'].capitalize()+"32 "+p['name']
								array.append (temp)
							elif p['type'] in ('uint8','uint16','uint32','uint64'):
								temp = "std_msgs::UInt"+p['type'].split('t')[1]+" "+p['name']
								array.append (temp)
							elif p['type'] in rosTypes:
								temp = "std_msgs::"+p['type'].capitalize()+" "+p['name']
								array.append (temp)
							elif '::' in p['type']:
								temp = p['type'].replace("::","ROS::")+" "+p['name']
								array.append (temp)
							else:
								temp = module['name']+"ROS::"+p['type']+" "+p['name']
								array.append (temp)

						methodDef += "(" + (', '.join(array)) + ")"
						methodContent = "<TABHERE>{\n<TABHERE><TABHERE>" + methodContent + "\n<TABHERE>}\n"
						cog.outl(methodDef)
						cog.outl(methodContent)
			"""
			cog.outl("};\n")
]]]
[[[end]]]
class GenericWorker :
[[[cog
if component['gui'] is not None:
	cog.outl("#ifdef USE_QTGUI\n<TABHERE>public " + component['gui'][1] + ", public Ui_guiDlg\n#else\n<TABHERE>public QObject\n #endif")
else:
	cog.outl("public QObject")
]]]
[[[end]]]
{
Q_OBJECT
public:
[[[cog
if component['language'].lower() == 'cpp':
	cog.outl("<TABHERE>GenericWorker(MapPrx& mprx);")
else:
	cog.outl("<TABHERE>GenericWorker(TuplePrx tprx);")
]]]
[[[end]]]
	virtual ~GenericWorker();
	virtual void killYourSelf();
	virtual void setPeriod(int p);

	virtual bool setParams(RoboCompCommonBehavior::ParameterList params) = 0;
	QMutex *mutex;
[[[cog

try:
	if 'agmagent' in [ x.lower() for x in component['options'] ]:
		cog.outl("<TABHERE>bool activate(const BehaviorParameters& parameters);")
		cog.outl("<TABHERE>bool deactivate();")
		cog.outl("<TABHERE>bool isActive() { return active; }")
except:
	pass

]]]
[[[end]]]


[[[cog
for name, num in getNameNumber(component['requires']):
	if communicationIsIce(name):
		if component['language'].lower() == "cpp":
			cog.outl('<TABHERE>'+name[0]+'Prx '+name[0].lower()+num +'_proxy;')
		else:
			cog.outl('<TABHERE>'+name[0]+'PrxPtr '+name[0].lower()+num +'_proxy;')

for name, num in getNameNumber(component['publishes']):
	if communicationIsIce(name):
		if component['language'].lower() == "cpp":
			cog.outl('<TABHERE>'+name[0]+'Prx '+name[0].lower()+num +'_pubproxy;')
		else:
			cog.outl('<TABHERE>'+name[0]+'PrxPtr '+name[0].lower()+num +'_pubproxy;')

]]]
[[[end]]]

[[[cog
if 'implements' in component:
	for impa in component['implements']:
		if type(impa) == str:
			imp = impa
		else:
			imp = impa[0]
		module = pool.moduleProviding(imp)
		for interface in module['interfaces']:
			if interface['name'] == imp:
				for mname in interface['methods']:
					method = interface['methods'][mname]
					paramStrA = ''
					if communicationIsIce(impa):
						for p in method['params']:
							# delim
							if paramStrA == '': delim = ''
							else: delim = ', '
							# decorator
							ampersand = '&'
							if p['decorator'] == 'out':
								const = ''
							else:
								if component['language'].lower() == "cpp":
									const = 'const '
								else:
									const = ''
									ampersand = ''
								if p['type'].lower() in ['int', '::ice::int', 'float', '::ice::float']:
									ampersand = ''
							# STR
							paramStrA += delim + const + p['type'] + ' ' + ampersand + p['name']
						cog.outl("<TABHERE>virtual " + method['return'] + ' ' + interface['name'] + "_" + method['name'] + '(' + paramStrA + ") = 0;")
					elif impa[1] == 'ros':
						paramStrA = module['name'] +"ROS::"+method['name']+"::Request &req, "+module['name']+"ROS::"+method['name']+"::Response &res"
						if imp in component['iceInterfaces']:
							cog.outl("<TABHERE>virtual bool ROS" + method['name'] + '(' + paramStrA + ") = 0;")
						else:
							cog.outl("<TABHERE>virtual bool " + method['name'] + '(' + paramStrA + ") = 0;")
sub_map = dict()
if 'subscribesTo' in component:
	for impa in component['subscribesTo']:
		#print ("impa", type(impa))
		"""
		if type(impa) == 'str':
			imp = impa
		else:
		"""
		imp = impa[0]
		module = pool.moduleProviding(imp)
		if module == None:
			print ('\nCan\'t find module providing', imp, '\n')
			sys.exit(-1)
		for interface in module['interfaces']:
			if interface['name'] == imp:
				for mname in interface['methods']:
					method = interface['methods'][mname]
					paramStrA = ''
					if communicationIsIce(impa):
						for p in method['params']:
							# delim
							if paramStrA == '': delim = ''
							else: delim = ', '
							# decorator
							ampersand = '&'
							if p['decorator'] == 'out':
								const = ''
							else:
								if component['language'].lower() == "cpp":
									const = 'const '
								else:
									const = ''
									ampersand = ''
								if p['type'].lower() in ['int', '::ice::int', 'float', '::ice::float']:
									ampersand = ''
							# STR
							paramStrA += delim + const + p['type'] + ' ' + ampersand + p['name']
						cog.outl("<TABHERE>virtual " + method['return'] + ' ' + interface['name'] + "_" + method['name'] + '(' + paramStrA + ") = 0;")
				if not communicationIsIce(impa) and impa[1] == 'ros':
					for t in module['types']:
						if t['type'] != 'dictionary':
							d_type = ''
							n = t['name'].split('::')[-1]
							sub_map[n] = dict()
							sub_map[n]['func_name'] = "cb_" + n
							if '::' in t['name']:
								d_type = t['name'].replace('::', 'ROS::')
							else:
								d_type = module['name'] + 'ROS::' + t['name']
							sub_map[n]['data_type'] = d_type
							cog.outl("<TABHERE>virtual void cb_"+n+"(" + d_type + " ros_msg) = 0;")

					for interface in module['interfaces']:
						for method in interface['methods']:
							m = interface['methods'][method]
							if isPub (m):
								p = m['params'][0]
								p_name = m['name']
								sub_map[p_name] = dict()
								if p['type'] in ('float','int'):
									sub_map[p_name]['data_type'] = "std_msgs::"+p['type'].capitalize()+"32"
								elif p['type'] in ('uint8','uint16','uint32','uint64'):
									sub_map[p_name]['data_type'] = "std_msgs::UInt"+p['type'].split('t')[1]+"32"
								elif p['type'] in rosTypes:
									sub_map[p_name]['data_type'] = "std_msgs::"+p['type'].capitalize()
								elif '::' in p['type']:
									sub_map[p_name]['data_type'] = p['type'].replace('::', 'ROS::')
								else:
									sub_map[p_name]['data_type'] = module['name'] + 'ROS::' + p['type']
								sub_map[p_name]['func_name'] = "cb_" + p_name
								cog.outl("<TABHERE>virtual void cb_"+p_name+"("+sub_map[p_name]['data_type']+" ros_msg) = 0;")

			if component['usingROS2']:
				cog.outl("<TABHERE>Subscriber"+interface['name']+"* "+interface['name'].lower()+"_proxy;")

]]]
[[[end]]]

protected:
[[[cog
if sm is not None:
    codQState = ""
    codQStateMachine = ""
    lsstates = ""
    if  not component['statemachine_visual']:
        codQStateMachine = "<TABHERE>QStateMachine " + sm['machine']['name'] + ";\n"
    else:
        codQStateMachine = "<TABHERE>QStateMachineWrapper " + sm['machine']['name'] + ";\n"
    if sm['machine']['contents']['states'] is not None:
        for state in sm['machine']['contents']['states']:
            aux = "<TABHERE>QState *" + state + "State;\n"
            lsstates += state +","
            if sm['substates'] is not None:
                for substates in sm['substates']:
                    if state == substates['parent']:
                        if substates['parallel'] is "parallel":
                            aux = "<TABHERE>QState *" + state + "State;\n"
                            break
            codQState += aux
    if sm['machine']['contents']['initialstate'] is not None:
        state = sm['machine']['contents']['initialstate']
        aux = "<TABHERE>QState *" + state + "State;\n"
        lsstates += state +","
        if sm['substates'] is not None:
            for substates in sm['substates']:
                if state == substates['parent']:
                    if substates['parallel'] is "parallel":
                        aux = "<TABHERE>QState *" + state + "State;\n"
                        break
        codQState += aux


    if sm['machine']['contents']['finalstate'] is not None:
        state = sm['machine']['contents']['finalstate']
        codQState +="<TABHERE>QFinalState *" + state + "State;\n"
        lsstates += state +","

    if sm['substates'] is not None:
        for substates in sm['substates']:
            if substates['contents']['states'] is not None:
                for state in substates['contents']['states']:
                    aux = "<TABHERE>QState *" + state + "State;\n"
                    lsstates += state +","
                    for sub in sm['substates']:
                        if state == sub['parent']:
                            if sub['parallel'] is "parallel":
                                aux = "<TABHERE>QState *" + state + "State;\n"
                                break
                    codQState += aux
            if substates['contents']['initialstate'] is not None:
                aux = "<TABHERE>QState *" + substates['contents']['initialstate'] + "State;\n"
                lsstates += state +","
                for sub in sm['substates']:
                    if state == sub['parent']:
                        if sub['parallel'] is "parallel":
                            aux = "<TABHERE>QState *" + state + "State;\n"
                            break
                codQState += aux
            if substates['contents']['finalstate'] is not None:
                codQState += "<TABHERE>QFinalState *" + substates['contents']['finalstate'] + "State;\n"
                lsstates += state +","

    cog.outl("//State Machine")
    cog.outl(codQStateMachine)
    cog.outl(codQState)
    cog.outl("//-------------------------")


]]]
[[[end]]]

	QTimer timer;
	int Period;
[[[cog
if component['usingROS'] == True:
	cog.outl("<TABHERE>ros::NodeHandle node;")
for imp in component['subscribesTo']:
	nname = imp
	nname = nname[0]
	module = pool.moduleProviding(nname)
	if module == None:
		print ('\nCan\'t find module providing', nname, '\n')
		sys.exit(-1)
	if not communicationIsIce(imp):
		"""
		for interface in module['interfaces']:
			if interface['name'] == nname:
				for mname in interface['methods']:
					method = interface['methods'][mname]
					cog.outl("<TABHERE>ros::Subscriber "+nname+"_"+mname+";")

		"""
		for key in sub_map:
			cog.outl("<TABHERE>ros::Subscriber sub_"+key+";")

for imp in component['implements']:
	nname = imp
	while type(nname) != type(''):
		nname = nname[0]
	module = pool.moduleProviding(nname)
	if module == None:
		print ('\nCan\'t find module providing', nname, '\n')
		sys.exit(-1)
	if not communicationIsIce(imp) and imp[1] == 'ros':
		for interface in module['interfaces']:
			if interface['name'] == nname:
				for mname in interface['methods']:
					method = interface['methods'][mname]
					cog.outl("<TABHERE>ros::ServiceServer "+nname+"_"+mname+";")

	if not communicationIsIce(imp) and imp[1] == 'ros2':
		for interface in module['interfaces']:
			if interface['name'] == nname:
				cog.outl("<TABHERE>Server"+interface['name']+"* "+interface['name'].lower()+"_proxy;")

if 'publishes' in component:
	for publish in component['publishes']:
		pubs = [p for p in publish]
		pubs = pubs[0]
		if not communicationIsIce(publish):
			if pubs in component['iceInterfaces']:
				cog.outl("<TABHERE>Publisher"+pubs+" *"+pubs.lower()+"_rosproxy;")
			else:
				cog.outl("<TABHERE>Publisher"+pubs+" *"+pubs.lower()+"_proxy;")
if 'requires' in component:
	for require in component['requires']:
		req = require
		while type(req) != type(''):
			req = req[0]
		if not communicationIsIce(require):
			if req in component['iceInterfaces']:
				cog.outl("<TABHERE>ServiceClient"+req+" *"+req.lower()+"_rosproxy;")
			else:
				if require[1] == 'ros':
					cog.outl("<TABHERE>ServiceClient"+req+" *"+req.lower()+"_proxy;")
				else:
					cog.outl("<TABHERE>Client"+req+" *"+req.lower()+"_proxy;")
try:
	if 'agmagent' in [ x.lower() for x in component['options'] ]:
		cog.outl("<TABHERE>bool active;")
		cog.outl("<TABHERE>AGMModel::SPtr worldModel;")
		cog.outl("<TABHERE>BehaviorParameters p;")
		cog.outl("<TABHERE>ParameterMap params;")
		cog.outl("<TABHERE>int iter;")
		cog.outl("<TABHERE>bool setParametersAndPossibleActivation(const RoboCompAGMCommonBehavior::ParameterMap &prs, bool &reactivated);")
		cog.outl("<TABHERE>RoboCompPlanning::Action createAction(std::string s);")
except:
	pass

]]]
[[[end]]]

private:


public slots:
[[[cog
if sm is not None:
    sm_virtual_methods = ""
    if sm['machine']['contents']['states'] is not None:
        for state in sm['machine']['contents']['states']:
            sm_virtual_methods += "<TABHERE>virtual void sm_" + state + "() = 0;\n"
    if sm['machine']['contents']['initialstate'] is not None    :
        sm_virtual_methods += "<TABHERE>virtual void sm_" + sm['machine']['contents']['initialstate'] + "() = 0;\n"
    if sm['machine']['contents']['finalstate'] is not None:
        sm_virtual_methods += "<TABHERE>virtual void sm_" + sm['machine']['contents']['finalstate'] + "() = 0;\n"
    if sm['substates'] is not None:
        for substates in sm['substates']:
            if substates['contents']['states'] is not None:
                for state in substates['contents']['states']:
                    sm_virtual_methods += "<TABHERE>virtual void sm_" + state + "() = 0;\n"
            if substates['contents']['initialstate'] is not None:
                sm_virtual_methods += "<TABHERE>virtual void sm_" + substates['contents']['initialstate'] + "() = 0;\n"
            if substates['contents']['finalstate'] is not None:
                sm_virtual_methods += "<TABHERE>virtual void sm_" + substates['contents']['finalstate'] + "() = 0;\n"
    cog.outl("//Slots funtion State Machine")
    cog.outl(sm_virtual_methods)
    cog.outl("//-------------------------")

if (sm is not None and sm['machine']['default'] is True) or component['statemachine'] is None:
    cog.outl("<TABHERE>virtual void compute() = 0;")
]]]
[[[end]]]
    virtual void initialize(int period) = 0;

signals:
	void kill();
[[[cog
if sm is not None:
    codsignals = ""
    if sm['machine']['contents']['transitions'] is not None:
        for transi in sm['machine']['contents']['transitions']:
            for dest in transi['dests']:
                codsignals += "<TABHERE>void t_" +  transi['src'] + "_to_" + dest + "();\n"
    if sm['substates'] is not None:
        for substates in sm['substates']:
            if substates['contents']['transitions'] is not None:
                for transi in substates['contents']['transitions']:
                    for dest in transi['dests']:
                        codsignals += "<TABHERE>void t_" + transi['src'] + "_to_" + dest + "();\n"
    cog.outl("//Signals for State Machine")
    cog.outl(codsignals)
    cog.outl("//-------------------------")
]]]
[[[end]]]
};

#endif

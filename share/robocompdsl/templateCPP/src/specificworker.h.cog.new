[[[cog

import sys
sys.path.append('/home/ksakash/archives/robocomp/python')

import cog
def A():
	cog.out('<@@<')
def Z():
	cog.out('>@@>')
def TAB():
	cog.out('<TABHERE>')

from dsl_parsers.dsl_factory import DSLFactory
from dsl_parsers.parsing_utils import communicationIsIce, isAGM1Agent, isAGM2Agent, IDSLPool, containsMap

includeDirectories = theIDSLPaths.split('#')
component = DSLFactory().from_file(theCDSL, include_directories=includeDirectories)
sm = DSLFactory().from_file(component['statemachine'])

if sm is None:
    component['statemachine'] = None
if component is None:
	print('Can\'t locate', theCDSLs)
	sys.exit(1)

pool = IDSLPool(theIDSLs, includeDirectories)
rosTypes = pool.getRosTypes()

def isPub(method):
	returnTypeVoid = (method['return'] == 'void')
	paramWithOut = False
	moreThanOne = not (len(method['params']) == 1)
	for param in method['params']:
		if param['decorator'] == 'out':
			paramWithOut = True
			break
	return returnTypeVoid and (not paramWithOut) and (not moreThanOne)

]]]
[[[end]]]
/*
 *    Copyright (C)
[[[cog
A()
import datetime
cog.out(str(datetime.date.today().year))
Z()
]]]
[[[end]]]
 by YOUR NAME HERE
 *
 *    This file is part of RoboComp
 *
 *    RoboComp is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    RoboComp is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with RoboComp.  If not, see <http://www.gnu.org/licenses/>.
 */

[[[cog
try:
	if 'agmagent' in [ x.lower() for x in component['options'] ]:
		cog.outl("// THIS IS AN AGENT")
except:
	pass
]]]
[[[end]]]
#ifndef SPECIFICWORKER_H
#define SPECIFICWORKER_H

#include <genericworker.h>
#include <innermodel/innermodel.h>
[[[cog
if component['innermodelviewer']:
	cog.outl("#ifdef USE_QTGUI")
	cog.outl("<TABHERE>#include <osgviewer/osgview.h>")
	cog.outl("<TABHERE>#include <innermodel/innermodelviewer.h>")
	cog.outl("#endif")
]]]
[[[end]]]

class SpecificWorker : public GenericWorker
{
Q_OBJECT
public:
[[[cog
	if component['language'].lower() == 'cpp':
		cog.outl("<TABHERE>SpecificWorker(MapPrx& mprx);")
	else:
		cog.outl("<TABHERE>SpecificWorker(TuplePrx tprx);")
]]]
[[[end]]]
	~SpecificWorker();
	bool setParams(RoboCompCommonBehavior::ParameterList params);
[[[cog
if 'implements' in component:
    for implement in component['implements']:
        interface_name = implement[0]
        module = pool.moduleProviding(interface_name)
        for interface in module['interfaces']:
            if interface['name'] == interface_name:
                for mname in interface['methods']:
                    method = interface['methods'][mname]
                    paramStrA = ''
                    if communicationIsIce(implement):
                        for p in method['params']:
                            # delim
                            if paramStrA == '': delim = ''
                            else: delim = ', '
                            # decorator
                            ampersand = '&'
                            if p['decorator'] == 'out':
                                const = ''
                            else:
                                if component['language'].lower() == "cpp":
                                    const = 'const '
                                else:
                                    const = ''
                                    ampersand = ''
                                if p['type'].lower() in ['int', '::ice::int', 'float', '::ice::float']:
                                    ampersand = ''
                            # STR
                            paramStrA += delim + const + p['type'] + ' ' + ampersand + p['name']
                        cog.outl("<TABHERE>" + method['return'] + ' ' +interface['name'] + "_" + method['name'] + '(' + paramStrA + ");")

if 'subscribesTo' in component:
    for implement in component['subscribesTo']:
        interface_name = implement[0]
        module = pool.moduleProviding(implement)
        for interface in module['interfaces']:
            if interface['name'] == interface_name:
                for mname in interface['methods']:
                    method = interface['methods'][mname]
                    paramStrA = ''
                    if communicationIsIce(implement):
                        for p in method['params']:
                            # delim
                            if paramStrA == '': delim = ''
                            else: delim = ', '
                            # decorator
                            ampersand = '&'
                            if p['decorator'] == 'out':
                                const = ''
                            else:
                                if component['language'].lower() == "cpp":
                                    const = 'const '
                                else:
                                    const = ''
                                    ampersand = ''
                                if p['type'].lower() in ['int', '::ice::int', 'float', '::ice::float']:
                                    ampersand = ''
                            # STR
                            paramStrA += delim + const + p['type'] + ' ' + ampersand + p['name']
                        cog.outl("<TABHERE>" + method['return'] + ' ' +interface['name'] + "_" + method['name'] + '(' + paramStrA + ");")
]]]
[[[end]]]

public slots:
[[[cog
if (sm is not None and sm['machine']['default'] is True) or component['statemachine'] is None:
	cog.outl("<TABHERE>void compute();")
]]]
[[[end]]]
	void initialize(int period);
[[[cog
if component['statemachine'] is not None:
    sm_specification = ""
    if sm['machine']['contents']['states'] is not None:
        for state in sm['machine']['contents']['states']:
            sm_specification += "<TABHERE>void sm_" + state + "();\n"
    if sm['machine']['contents']['initialstate'] is not None:
        sm_specification += "<TABHERE>void sm_" + sm['machine']['contents']['initialstate'] + "();\n"
    if sm['machine']['contents']['finalstate'] is not None:
        sm_specification += "<TABHERE>void sm_" + sm['machine']['contents']['finalstate'] + "();\n"
    if sm['substates'] is not None:
        for substates in sm['substates']:
            if substates['contents']['states'] is not None:
                for state in substates['contents']['states']:
                    sm_specification += "<TABHERE>void sm_" + state + "();\n"
            if substates['contents']['initialstate'] is not None:
                sm_specification += "<TABHERE>void sm_" + substates['contents']['initialstate'] + "();\n"
            if substates['contents']['finalstate'] is not None:
                sm_specification += "<TABHERE>void sm_" + substates['contents']['finalstate'] + "();\n"
    cog.outl("//Specification slot methods State Machine")
    cog.outl(sm_specification)
    cog.outl("//--------------------")
]]]
[[[end]]]
private:
	std::shared_ptr<InnerModel> innerModel;
[[[cog
if component['innermodelviewer']:
	cog.outl("#ifdef USE_QTGUI")
	cog.outl("<TABHERE>OsgView *osgView;")
	cog.outl("<TABHERE>InnerModelViewer *innerModelViewer;")
	cog.outl("#endif")
try:
	if isAGM1Agent(component):
		cog.outl("<TABHERE>std::string action;")
		cog.outl("<TABHERE>ParameterMap params;")
		cog.outl("<TABHERE>AGMModel::SPtr worldModel;")
		cog.outl("<TABHERE>bool active;")
		if 'innermodelviewer' in [ x.lower() for x in component['options'] ]:
			cog.outl("<TABHERE>void regenerateInnerModelViewer();")
		cog.outl("<TABHERE>bool setParametersAndPossibleActivation(const ParameterMap &prs, bool &reactivated);")
		cog.outl("<TABHERE>void sendModificationProposal(AGMModel::SPtr &worldModel, AGMModel::SPtr &newModel);")
	elif isAGM2Agent(component):
		cog.outl("<TABHERE>std::string action;")
		cog.outl("<TABHERE>AGMModel::SPtr worldModel;")
		cog.outl("<TABHERE>bool active;")
except:
	pass

]]]
[[[end]]]

};

#endif

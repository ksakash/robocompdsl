//******************************************************************
// 
//  Generated by RoboCompDSL
//  
//  File name: InverseKinematics.ice
//  Source: InverseKinematics.idsl
//  
//****************************************************************** 
#ifndef ROBOCOMPINVERSEKINEMATICS_ICE
#define ROBOCOMPINVERSEKINEMATICS_ICE
module RoboCompInverseKinematics
{
	exception IKException{
                string text;
        };
	struct Pose6D
	{
		 float x;
		 float y;
		 float z;
		 float rx;
		 float ry;
		 float rz;
	};
	struct WeightVector
	{
		 float x;
		 float y;
		 float z;
		 float rx;
		 float ry;
		 float rz;
	};
	struct Axis
	{
		 float x;
		 float y;
		 float z;
	};
	struct Motor
	{
		 string name;
		 float angle;
	};
	sequence <Motor> MotorList;
	struct TargetState
	{
		 bool finish;
		 string state;
		 int elapsedTime;
		 float errorT;
		 float errorR;
		 MotorList motors;
	};
	dictionary <string, string> StringMap;
	dictionary <string, float> ScalarMap;
	interface InverseKinematics
	{
		TargetState getTargetState (string bodyPart, int targetID);
		int setTargetPose6D (string bodyPart, Pose6D target, WeightVector weights) throws IKException;
		int mapBasedTarget (string bodyPart, StringMap strings, ScalarMap scalars) throws IKException;
		int setTargetAlignaxis (string bodyPart, Pose6D target, Axis ax) throws IKException;
		int setTargetAdvanceAxis (string bodyPart, Axis ax, float dist) throws IKException;
		bool getPartState (string bodyPart) throws IKException;
		void goHome (string bodyPart) throws IKException;
		void stop (string bodyPart) throws IKException;
		void setJoint (string joint, float angle, float maxSpeed) throws IKException;
		void setFingers (float d) throws IKException;
	};
};

#endif
